정렬이란 데이터를 특정한 기준에 따라서 순서대로 나열하는 것

정렬된 데이터의 경우 이진 탐색 가능
면접에서 단골 문제로 출제됨

파이썬에 내장된 정렬 알고리즘이 가장 빠름

선택 정렬(Selection Sort): 
    데이터들중 가장 작은 데이터를 선택해 맨 앞 데이터와 바꾸고 그 다음 작은 데이터를 선택해 두번째 데이터와 바꾸는 과정
    시간복잡도 : O(N^2)

삽입 정렬(Insertion Sort):
    특정한 데이터를 적절한 위치에 삽입한다는 의미. 해당 데이터 이전 데이터들은 모두 정렬되어 있다고 가정
    시간복잡도 : O(N^2) 어느정도 정렬되어 있다면 빠르게 동작 
    따라서 이미 어느정도 정렬된 데이터를 정렬할 경우 삽입 정렬을 이용하는것이 효과적이다

퀵 정렬(Quick Sort):
    기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 과정
    피벗(pivot)이 이용됨 피벗을 설정하고 분할하는 방식에 따라 퀵 정렬을 구분함
    호어분할 방식: 리스트의 첫 번째 데이터를 피벗으로 정함
    시간복잡도: 평균적으로 O(NlogN) 최악의 경우 O(N^2)

계수 정렬(Count sort):
    특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠른 알고리즘
    데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용 가능
    가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지않을 때 효과적
    특정 구간의 모든 데이터를 담을 크기에 리스트를 선언하여 해당 데이터가 몇번 등장했는지 체크한 후,
    그 데이터들을 순서대로 출력해줌
    시간복잡도 : O(N + K) N: 데이터의 개수, K: 최대값의 크기
    공간복잡도 : 데이터가 만약 0과 999999만 존재할 경우 상당히 비효율적 => 리스트 크기가 100만개가 되도록 선언해야하기 때문
                따라서 항상 사용할 수 있는 것이 아니고, 동일한 값을 가진 데이터가 여러개 등장할 때 적합
                일반적인 경우 데이터의 특징을 알 수 없다면 퀵 정렬이 효과적
                O(N + K)

파이썬의 기본 정렬 sorted():
    병합 정렬과 삽입 정렬의 아이디어를 더한 하이브리드 방식
    일반적으로 퀵 정렬보다는 느리지만 최악의 경우에도 O(NlogN)을 보장함
    리스트, 딕셔너리, 집합을 입력받아서 리스트 결과 출력


문제유형
1. 정렬 라이브러리로 풀 수 있는 문제
2. 정렬 알고리즘의 원리에 대해서 물어보는 문제
3. 더 빠른 정렬이 필요한 문제

    
