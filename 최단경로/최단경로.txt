최단 경로를 알아내는 알고리즘에는 다익스트라, 플로이드워셜, 벨만포드 알고리즘이 있다.

다익스트라 알고리즘:
    특정 노드에서 출발하여 다른 노드로 가는 각각의 최단경로를 구해주는 알고리즘
    음의 간선이 없을때 정상적으로 동작함
    
    1. 출발 노드 설정
    2. 최단 거리 테이블 초기화( 다른 모든 노드로 가는 거리를 무한으로 초기화 )
    3. 방문하지 않은 노드 중 최단 거리가 가장 짧은 노드를 선택
    4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신
    5. 3,4번을 반복

    => 한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것

    시간 복잡도 : 방법 1. O(V^2) V: 노드의 개수 => O(V) 번에 걸쳐 최단 거리가 가장 짧은 노드를 매번 선형 탐색해야 하고,
    현재 노드와 연결된 노드를 매번 일일이 확인하기 때문
                
                 방법 2. 최악의 경우에도 O(ElogV) E: 간선의 개수
                        우선순위 큐를 이용하여 거리가 가장 짧은 노드를 로그 시간안에 찾아낸다
                        우선순위 큐에는 데이터 묶음을 넣을 수 있는데 일반적으로 첫번째 원소를 기준으로 우선순위를 결정
                        일반적으로 최소 힙 구조 => 우선 순위가 가장 낮은 데이터가 먼저 삭제
                        최대 힙을 이용하고 싶다면 -를 붙여 저장하고 꺼내어서 -를 붙여 사용함

                        최대 E개의 간선 데이터를 힙에 넣었다가 빼는 것으로 볼 수 있으므로 O(ElogE)
                        이 때, E는 항상 V^2 보다 작으므로 logE < logV^2 = 2logV 이다
                        따라서 O(ElogV)라고 할 수 있다.


플로이드 워셜 알고리즘:
    모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구하는 알고리즘
    다익스트라와 달리 최단 거리 노드를 찾지 않고 모든 노드를 순회하므로 각 단계마다 O(N^2)의 연산이 필요
    N개의 점에 대해서 수행하므로 총 시간 복잡도 : O(N^3)
