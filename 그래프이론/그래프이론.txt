1. 서로소 집합 : 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조
                union & find 를 이용 ( union & find 자료구조 라고 불리기도 함 )

                1. union 연산을 확인하여, 서로 연결된 두 노드 A, B를 확인 후,
                A와 B의 루트 노드 A', B' 을 찾아 A'의 부모 노드를 B'으로 설정

                2. 모든 union연산을 처리할 때 까지 1번 과정을 반복

                주로 작은 노드가 부모가 되고 큰 노드가 자식이 된다.

                구현 :
                    1. 노드 수의 부모 테이블을 모든 노드가 자신을 가리키도록 초기화
                    2. union할 노드들의 루트 노드를 찾아 비교하여 더 큰 루트노드가 작은 루트 노드를 가리키도록 변경
                    3. 만약 루트노드가 같다면 싸이클이 발생한 것
                
                find 함수 최적화 -> path compression과 rank!!
                path compression은 find_parent시 parent리스트 값도 같이 변경하는 것
                rank는 해당 트리의 높이를 저장해 놓는 것

2. 신장 트리 : 하나의 그래프가 있을 때 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프가
              모든 노드가 연결되어 사이클이 존재하지 않는다는 조건은 트리의 성립조건. 즉 그래프에서 만들어 낼 수 있는 부분 트리 => 신장 트리

              1. 크루스칼 알고리즘( N개의 도시가 있을 때, 최소 비용으로 모든 도시를 연결하려면?? )
                최소 신장 트리 알고리즘 중 하나 ( prim 알고리즘도 있음 )
                
                1. 간선 데이터를 비용에 따라 오름차순으로 정렬
                2. 간선을 하나씩 확인하며 현재의 간선이 사이클을 발생시키는지 확인
                3. 사이클이 발생하지 않는 경우, 최소 신장 트리에 포함시킴
                4. 사이클이 발생하는 경우, 최소 신장 트리에서 제외
                5. 모든 간선에 대하여 2~4번의 과정을 반복

              시간 복잡도: O(ElogE) - 간선을 정렬하는 시간

3. 위상 정렬 : 정렬 알고리즘의 일종으로, 방향 그래프의 모든 노드를 방향성에 거스르지 않도록 순서대로 나열하는 것을 말함
              대표 예시: 선수과목을 고려한 학습 순서 설정

              진입차수 : 특정한 노드로 들어오는 간선의 개수

              1. 진입차수가 0인 노드를 큐에 넣는다
              2. 큐에서 원소를 꺼내 해당 노드에서 출발하는 간선을 그래프에서 제거한다
              3. 새롭게 진입차수가 0이 된 노드를 큐에 넣는다.
              4. 2~3을 큐가 빌 때까지 반복한다.                    
              
              모든 원소를 방문하기 전 큐가 비어버린다면 사이클이 발생한 것.

              시간 복잡도: O(V+E)
