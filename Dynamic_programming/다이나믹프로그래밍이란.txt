현실 세계에 다양한 문제들을 컴퓨터를 사용하여 해결하는데, 컴퓨터는 시간이나 메모리 공간의 제약을 가지고 있다.
따라서 주어진 연산속도와 메모리 공간을 최대한 활용할 수 있도록 알고리즘을 작성해야 한다.
=> 다이나믹 프로그래밍이 그 대표적인 방법

대표적인 예시: 피보나치 수열

다이나믹 프로그래밍을 통해 해결할 수 있는 경우:
    1. 큰 문제를 작은 문제로 나눌 수 있음
    2. 작은 문제에서 구한 답이 그것을 포함하는 큰 문제에서도 동일하게 이용

재귀 함수를 통한 다이나믹 프로그래밍은 함수를 다시 호출했을 때 메모리 상에 적재되는 과정때문에 오버헤드가 발생할 수 있음
=> 반복문으로 구성하는 것이 성능이 더 뛰어남

큰 문제를 해결하기 위해 작은 문제를 호출하는 경우 => 탑다운방식(하향식)
반복문을 이용할 경우 작은 문제부터 도출하므로 => 보텀업방식(상향식)

결과 저장용 테이블을 DP테이블 이라 함


특정 문제를 완전 탐색 알고리즘으로 접근했을 때, 시간이 매우 오래걸린다면 다이나믹 프로그래밍을 적용할 수 있는지
해결하고자 하는 부분 문제들의 중복 여부를 확인해보기

재귀 함수로 구현시 recursion depth 오류가 발생한다면 sys 라이브러리 안에 setrecursionlimit()함수를 통해 재귀 제한을 완화할 수 있음

